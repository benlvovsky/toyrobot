#include <stdio.h>
#include <iostream>
#include "cmdproc.hpp"
#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string/split.hpp>

Facing CommandProcessing::faceStrToEnum(string sFacing) {
	if (0 == sFacing.compare("NORTH")) {
		return NORTH;
	} else if (0 == sFacing.compare("SOUTH")) {
		return SOUTH;
	} else if (0 == sFacing.compare("WEST")) {
		return WEST;
	} else if (0 == sFacing.compare("EAST")) {
		return EAST;
	} else {
		throw invalid_argument("Incorrect Facing string value");
	}
}


void CommandProcessing::process(string line) {
	std::vector<std::string> tokens;
	boost::split(tokens, line, boost::is_any_of(" ,\t\n\r"));

	if(1 == tokens.size() && 0 == line.compare("MOVE")) {
		tr->Move();
	} else if(4 == tokens.size() && tokens[0].compare("PLACE") == 0) {
		cout << "PLACE command detected" << endl;
		tr->Place(stoi(tokens[1]), stoi(tokens[2]), faceStrToEnum(tokens[3]));
	} else if(1 == tokens.size() && tokens[0].compare("LEFT") == 0) {
		tr->Left();
	} else if(1 == tokens.size() && tokens[0].compare("RIGHT") == 0) {
		tr->Right();
	} else if(1 == tokens.size() && tokens[0].compare("REPORT") == 0) {
		Report report = tr->CreateReport();
		cout << "Report: X:" << report.x << ", Y:" << report.y <<", FACING:" << report.facing << ", placed status: " << report.placed << endl;
	} else {
		throw invalid_argument("Incorrect command or number of parameters");
	}
}
