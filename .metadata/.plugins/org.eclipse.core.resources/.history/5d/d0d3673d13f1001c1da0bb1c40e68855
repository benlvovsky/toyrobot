#include <iostream>
#include "gtest/gtest.h"
#include "src/toyrobot.hpp"
#include "src/cmdproc.hpp"

using namespace std;

TEST(ToyRobot, Place) {
  ToyRobot tr;
  EXPECT_FALSE(tr.IsPlaced());
  tr.Place(0, 0, NORTH);
  Report report = tr.CreateReport();
  EXPECT_EQ(NORTH, report.facing);
  EXPECT_EQ(0, report.x);
  EXPECT_EQ(0, report.y);
}


TEST(ToyRobot, EastMovement) {
  ToyRobot tr;
  tr.Place(0, 0, EAST);
  tr.Move();
  cerr << tr.CreateReport().y;
  cerr << tr.CreateReport().y;
  cerr << tr.CreateReport().facing;
  cerr << tr.CreateReport().placed << endl;
  EXPECT_EQ(1, tr.CreateReport().x);
  tr.Move();
  EXPECT_EQ(2, tr.CreateReport().x);
  tr.Move();
  EXPECT_EQ(3, tr.CreateReport().x);
  tr.Move();
  EXPECT_EQ(4, tr.CreateReport().x);
  try {
	  tr.Move();
	  FAIL() << "Expected exception";
  } catch(invalid_argument e) {
	  cerr << "EXPECT_STREQ:" << e.what() << std::endl;
	  EXPECT_STREQ("Move East to position is beyond acceptable", e.what());
  }
}


TEST(ToyRobot, WestMovement) {
  ToyRobot tr;
  tr.Place(4, 0, WEST);
  tr.Move();
  EXPECT_EQ(3, tr.CreateReport().x);
  tr.Move();
  EXPECT_EQ(2, tr.CreateReport().x);
  tr.Move();
  EXPECT_EQ(1, tr.CreateReport().x);
  tr.Move();
  EXPECT_EQ(0, tr.CreateReport().x);
  try {
	  tr.Move();
	  FAIL() << "Expected exception";
  } catch(invalid_argument e) {
	  cerr << "EXPECT_STREQ:" << e.what() << std::endl;
	  EXPECT_STREQ("Move West to position is beyond acceptable", e.what());
  }
}


TEST(ToyRobot, SouthMovement) {
  ToyRobot tr;
  tr.Place(0, 0, SOUTH);
  tr.Move();
  EXPECT_EQ(1, tr.CreateReport().y);
  tr.Move();
  EXPECT_EQ(2, tr.CreateReport().y);
  tr.Move();
  EXPECT_EQ(3, tr.CreateReport().y);
  tr.Move();
  EXPECT_EQ(4, tr.CreateReport().y);
  try {
	  tr.Move();
	  FAIL() << "Expected exception";
  } catch(invalid_argument e) {
	  cerr << "EXPECT_STREQ:" << e.what() << std::endl;
	  EXPECT_STREQ("Move South to position is beyond acceptable", e.what());
  }
}


TEST(ToyRobot, NorthMovement) {
  ToyRobot tr;
  tr.Place(0, 4, NORTH);
  tr.Move();
  EXPECT_EQ(3, tr.CreateReport().y);
  tr.Move();
  EXPECT_EQ(2, tr.CreateReport().y);
  tr.Move();
  EXPECT_EQ(1, tr.CreateReport().y);
  tr.Move();
  EXPECT_EQ(0, tr.CreateReport().y);
  try {
	  tr.Move();
	  FAIL() << "Expected exception";
  } catch(invalid_argument e) {
	  cerr << "EXPECT_STREQ:" << e.what() << std::endl;
	  EXPECT_STREQ("Move North to position is beyond acceptable", e.what());
  }
}


TEST(ToyRobot, LeftRight) {
  ToyRobot tr;
  tr.Place(0, 4, NORTH);
  EXPECT_EQ(NORTH, tr.CreateReport().facing);
  tr.Left();
  EXPECT_EQ(WEST, tr.CreateReport().facing);
  tr.Left();
  EXPECT_EQ(SOUTH, tr.CreateReport().facing);
  tr.Left();
  EXPECT_EQ(EAST, tr.CreateReport().facing);

  tr.Place(0, 4, NORTH);
  tr.Right();
  EXPECT_EQ(EAST, tr.CreateReport().facing);
  tr.Right();
  EXPECT_EQ(SOUTH, tr.CreateReport().facing);
  tr.Right();
  EXPECT_EQ(WEST, tr.CreateReport().facing);
  tr.Right();
  EXPECT_EQ(NORTH, tr.CreateReport().facing);
}


TEST(CommandProcessing, faceStrToEnum) {
  ToyRobot tr;
  CommandProcessing cp(tr);
  EXPECT_EQ(Facing.WEST, cp.faceStrToEnum("WEST");

  tr.Place(0, 4, NORTH);
  EXPECT_EQ(NORTH, tr.CreateReport().facing);
  tr.Left();
  EXPECT_EQ(WEST, tr.CreateReport().facing);
  tr.Left();
  EXPECT_EQ(SOUTH, tr.CreateReport().facing);
  tr.Left();
  EXPECT_EQ(EAST, tr.CreateReport().facing);

  tr.Place(0, 4, NORTH);
  tr.Right();
  EXPECT_EQ(EAST, tr.CreateReport().facing);
  tr.Right();
  EXPECT_EQ(SOUTH, tr.CreateReport().facing);
  tr.Right();
  EXPECT_EQ(WEST, tr.CreateReport().facing);
  tr.Right();
  EXPECT_EQ(NORTH, tr.CreateReport().facing);
}


int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
